module Reader where

import Prelude
import Prelude qualified ((.))
import Category

newtype Reader a b = Reader { run : a -> b } deriving Functor

instance Applicative (Reader a) where
  pure = Reader Prelude.. const
  --(<*>) : (Reader (a -> (b -> c))) -> (Reader (a -> (b))) -> (Reader (a -> c))
  Reader f <*> Reader g = Reader (\a -> (f a) (g a))

instance Category Reader where
  id = Reader identity
  Reader f . Reader g = Reader (f Prelude.. g)
-- time = Reader identity
