module FinancialObligation where

import Prelude hiding (and, or, time, (.))
import Obligation
import Observable qualified as O
import Observable (TimeF, PointF, NumberF, InequalityF)
import Category

at
  : forall f t . (TimeF f t, PointF f t t, InequalityF f t t)
  => t -> f t Bool
at t = O.time O.== (O.pure t)

zcb
  : forall f t a . (TimeF f t, PointF f t t, PointF f t Decimal, InequalityF f t t)
  => t -> Decimal -> a -> Obligation f t a
zcb maturity payoff asset = when (at maturity) $ scale (O.pure payoff) (one asset)

european
  : forall f t a . (TimeF f t, PointF f t t, InequalityF f t t)
  => t -> Obligation f t a -> Obligation f t a
european t u = when (at t) (u `or` Zero)

{-
between
  : forall f t a . (TimeF f t, PointF f t t, InequalityF (f t) t, LogicF (f t))
  => t -> t -> f t Bool
between t t' = liftA2 (&&) (O.time O.>= O.pure t) O.&&  (O.time O.<= O.pure t')

american
  : forall f t a . (Ord t, Category f, Applicative (f t))
  => t -> t -> Obligation f t a -> Obligation f t a
american t t' u = anytime (between t t') u

-}
