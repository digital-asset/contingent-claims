module FinancialObligation where

import Prelude hiding (and, or, time, (.))
import Obligation
import Category

time
  : forall f t . Category f
  => f t t
time = id

zcb
  : forall f t a . (Eq t, Category f, Applicative (f t))
  => t -> Decimal -> a -> Obligation f t a
zcb maturity payoff asset = when (at maturity) $ scale (pure payoff) (one asset)

at
  : forall f t . (Eq t, Category f, Applicative (f t))
  => t -> f t Bool
at t = liftA2 (==) time (pure t)

european
  : forall f t a . (Eq t, Category f, Applicative (f t))
  => t -> Obligation f t a -> Obligation f t a
european t u = when (at t) (u `or` Zero)

american
  : forall f t a . (Ord t, Category f, Applicative (f t))
  => t -> t -> Obligation f t a -> Obligation f t a
american t t' u = anytime (between t t') u

between
  : forall f t a . (Ord t, Category f, Applicative (f t))
  => t -> t -> f t Bool
between t t' = liftA2 (&&) (liftA2 (>=) time (pure t))  (liftA2 (<=) time (pure t'))


