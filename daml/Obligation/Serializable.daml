module Obligation.Serializable where 

{- 

We require a separate data type for a serializable obligation, because DAML
does not support serialization of higher kinds. i.e. the @f@ in @Obligation@.
Here we replace it with the concrete `Observation`.

-}

import Currency
import Observation
import DA.Next.Set

type T = Obligation
type A = Either Currency Text

data Obligation 
  = Zero_
  | One_ (ContractId One)
  | Give_ (ContractId Give)
  | And_ (ContractId And)
  | Scale_ (ContractId Scale)
  | When_ (ContractId When)
  deriving (Eq, Show)

template One 
  with
    bearer: Party
    counterparty: Party
    asset: A
  where
    signatory fromList [bearer, counterparty]

template Give
  with
    bearer: Party
    counterparty: Party
    obligation: T
  where
    signatory fromList [bearer, counterparty]

template And
  with
    bearer: Party
    counterparty: Party
    lhs: T
    rhs: T
  where
    signatory fromList [bearer, counterparty]
  
template Scale
  with
    bearer: Party
    counterparty: Party
    predicate: Observation.Wrapper Decimal
    obligation: T
  where
    signatory fromList [bearer, counterparty]

template When
  with
    bearer: Party
    counterparty: Party
    predicate: Observation.Wrapper Bool
    obligation: T
  where
    signatory fromList [bearer, counterparty]
