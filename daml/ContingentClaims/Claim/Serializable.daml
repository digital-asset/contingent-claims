module ContingentClaims.Claim.Serializable where 

{-

We require a separate data type for a serializable obligation, because DAML
does not support serialization of higher kinds. i.e. the @f@ in @Claim@.
Here we replace it with the concrete `Observation`.

-}

import ContingentClaims.Observation
import Daml.Control.Recursion

type T = Claim
type F = ClaimF

data Claim t a
  = Zero
  | One a
  | Give (Claim t a)
  | And with lhs: Claim t a, rhs: Claim t a
  | Or with lhs: Claim t a, rhs: Claim t a
  | Cond with predicate: Observation t Bool, success: Claim t a, failure: Claim t a
  | Scale with k: Observation t Decimal, obligation: Claim t a
  | When with predicate: Observation t Bool, obligation: Claim t a
--  | Anytime with predicate: Observation t Bool, obligation: Claim t a
--  | Until with predicate: Observation t Bool, obligation: Claim t a
  deriving (Eq, Show, Functor)

data ClaimF t a x
  = ZeroF
  | OneF a
  | GiveF x
  | AndF with lhs: x, rhs: x
  | OrF with lhs: x, rhs: x
  | CondF with predicate: (Observation t Bool), success: x, failure: x
  | ScaleF with k: (Observation t Decimal), obligation: x
  | WhenF with predicate: (Observation t Bool), obligation: x
--   | AnytimeF with predicate: (Observation t Bool), obligation: x
--   | UntilF with predicate: (Observation t Bool), obligation: x
  deriving Functor

-- TODO: rename variables to be consistent with the types
instance Recursive (Claim t a) (ClaimF t a) where
  project Zero = ZeroF
  project (One x) = OneF x
  project (Give a) = GiveF a
  project (And a b) = (AndF a b)
  project (Or a b) = (OrF a b)
  project (Cond x a b) = CondF x a b
  project (Scale k x) = ScaleF k x
  project (When o x) = WhenF o x
--  project (Anytime o x) = AnytimeF o x
--  project (Until o x) = UntilF o x

instance Corecursive (Claim t a) (ClaimF t a) where
  embed ZeroF = Zero
  embed (OneF x) = One x
  embed (GiveF a) = Give a
  embed (AndF a b) = (And a b)
  embed (OrF a b) = (Or a b)
  embed (CondF x a b) = Cond x a b
  embed (ScaleF k x) = Scale k x
  embed (WhenF o x) = When o x
--  embed (AnytimeF o x) = Anytime o x
--  embed (UntilF o x) = Until o x
