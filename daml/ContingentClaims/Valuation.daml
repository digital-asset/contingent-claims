{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE NoImplicitPrelude #-}
module ContingentClaims.Valuation where

import ContingentClaims.Claim (Claim(..), ClaimF(..))
import ContingentClaims.Math.Random (_E, cdf)
import ContingentClaims.Math.Random qualified as Random
import ContingentClaims.Math.Ring
import ContingentClaims.Math.Ring qualified as Ring
import ContingentClaims.Math.Indicator
-- import ContingentClaims.Observable (Observable)
import ContingentClaims.Observation (Observation(..), Key)
import ContingentClaims.Math.ADTaLaCarte
import Daml.Control.Recursion (Fix(..),Recursive(..))
import ContingentClaims.Math.Lit

import Prelude (Decimal, undefined)

type ExprF = ConstF :+: IndicatorF :+: Random.VariableF :+: RingF

fapf : (a -> Fix ExprF) -> (t -> Key -> Fix ExprF) -> Claim f t a -> Fix ExprF
fapf disc spot = cata undefined --(fapf' disc spot)

{-
fapf' : (a -> Fix ExprF) -> (t -> Key -> Fix ExprF) -> ClaimF f t a (Fix ExprF) -> Fix ExprF
fapf' _ _ (OrF c c') = max c c' where
  max a b = a * indicator a b + b * indicator b a
fapf' disc _ (WhenF (DateEqu (DateIdentity, DateConst t)) c) = _ t c
fapf' _ _ (ScaleF obs c) = rv obs * c
fapf' disc _ _ (One asset) = disc asset
-}

rv : Observation t Decimal -> Fix ExprF
rv (DecimalConst x) = point x
rv (DecimalObs key) = undefined
rv (DecimalLte (lhs, rhs)) = undefined
rv (DecimalEqu (lhs, rhs)) = undefined
rv (DecimalAdd (lhs, rhs)) = rv lhs + rv rhs
rv (DecimalNeg (lhs)) = Ring.negate (rv lhs)
rv (DecimalMul (lhs, rhs)) = undefined
rv (DecimalDiv (lhs, rhs)) = undefined
rv (BoolConst b) = undefined
rv (DateIdentity) = undefined
rv (DateConst t) = undefined
rv (DateLte (lhs, rhs)) = undefined
rv (DateEqu (lhs, rhs)) = undefined
