module ContingentClaims.Lifecycle (
    lifecycle
  , lifecycle'
  , pruneLeaf
  , pruneLeaf'
  , pruneOr
) where

import ContingentClaims.Claim (Claim, Claim(..), ClaimF(..))
import ContingentClaims.Observation (Observation, eval)
import Daml.Control.Kleisli
import Daml.Control.Recursion
import Daml.Data.Profunctor

type C a = Claim Observation Date a
type F a = ClaimF Observation Date a

deriving instance Eq a => Eq (C a)

-- Returns a function that executes 'runSettl' on nodes that are 'current' at time t.
-- Uses @runSpot@ to lookup spot prices.
-- Uses @branch@ to make an election during a branch
lifecycle : Eq a
  => (a -> Decimal -> Date -> Update c)
  -> (Text -> Date -> Update Decimal)
  -> (C a -> C a -> C a)
  -> C a
  -> Date -> Update [c]
lifecycle runSettl runSpot branch claim = runKleisli (runKleisli (para (lifecycle' runSettl runSpot branch) claim) 1.0)

lifecycle' : Eq a
  => (a -> Decimal -> Date -> Update c)
  -> (Text -> Date -> Update Decimal)
  -> (C a -> C a -> C a)
  -> ClaimF Observation Date a (C a, Kleisli (Kleisli Update Date) Decimal [c])
  -> Kleisli (Kleisli Update Date) Decimal [c]
-- ^ Lifecycling Algebra
-- | Uses an continuation to 'bubble up' the scale factor.
-- | TODO: re-write to evalute observations eagerly, and prune stale nodes top-down. Currently this traverses the entire tree (even stale nodes).
lifecycle' runSettl runSpot branch = \case
  ZeroF -> skip
  OneF a -> do
    cid <- runSettl' a
    return [cid]
  GiveF _ -> error "Unimplemented: settle GiveF" -- TODO
  AndF (_, g) (_, g') -> liftA2 (++) g g'
  OrF (c, g) (c', g') -> let b = branch c c' in
    if b == c then g
      else if b == c' then g'
         else error "Lifecycle.settle: Non-existent branch chosen."
  CondF p (_, g) (_, g') -> conditionally p g g'
  ScaleF k (_, g) -> do
    k <- lift . eval runSpot $ k
    lmap (k *) g
  WhenF p (_, g) -> conditionally p g skip
--      AnytimeF p g -> conditionally p g skip
--      UntilF p g -> conditionally p g skip --FIXME: this is incorrect

  where
    conditionally p g g' = do
      p <- lift . eval runSpot $ p
      if p then g else g'

    skip = pure []

    -- runSettl' : a -> (Kleisli (Kleisli Update t) Decimal c)
    runSettl' a =  Kleisli (rmap Kleisli (runSettl a))

lift : Kleisli Update t m -> Kleisli (Kleisli Update t) Decimal m
lift = Kleisli . const

-- Prune the node with given asset/quantity/date
-- FIXME: this should only prune a _single_ instance of that node.
pruneLeaf
  : Eq a
  => (Text -> Date -> Update Decimal)
  -> a -> Decimal
  -> C a
  -> Date -> Update (C a)
pruneLeaf runSpot asset qty o = runKleisli (runKleisli (para (pruneLeaf' runSpot asset qty) o) 1.0)

pruneLeaf' : Eq a
  => (Text -> Date -> Update Decimal)
  -> a
  -> Decimal
  -> ClaimF Observation Date a (C a, Kleisli (Kleisli Update Date) Decimal (C a))
  -> Kleisli (Kleisli Update Date) Decimal (C a)
pruneLeaf' runSpot asset qty = \case
  ZeroF -> pure Zero
  OneF a' ->
    Kleisli \qty' ->
      Kleisli \_ ->
        if qty' == qty && asset == a' then pure Zero else pure $ One a'
  GiveF (o, g) -> do
    trimmed <- g
    if trimmed == Zero then pure Zero else pure $ Give o
  ScaleF k (_, g) -> do
    k <- lift . eval runSpot $ k
    lmap (k *) g
  WhenF p (o, g) -> do
    b <- lift . eval runSpot $ p
    if b then g else pure $ When p o
  AndF (o, g) (o', g') -> do -- TODO: this can be optimized to eval rhs lazily
    trimmed <- g
    trimmed' <- g'
    case (trimmed, trimmed') of
      (Zero, _) -> pure trimmed'
      (_, Zero) -> pure trimmed
      _ -> pure $ And o o'
  OrF (o, g) (o', g') -> do
    trimmed <- g
    trimmed' <- g'
    case (trimmed, trimmed') of
      (Zero, _) -> pure trimmed'
      (_, Zero) -> pure trimmed
      _ -> pure $ Or o o'
  CondF p (o, g) (o', g') -> do
    b <- lift . eval runSpot $ p
    if b then g else g'

-- Prunes *other* branch(es) in an 'Or' node, by structural equality.
-- FIXME: ignores 'Give'
pruneOr
  : Eq a
  => C a
  -> C a
  -> C a
pruneOr branchToKeep = apo \case
  Or o o' | o == branchToKeep -> Left <$> project branchToKeep
  Or o o' | o' == branchToKeep -> Left <$> project branchToKeep
  other -> Right <$> project other
