module ContingentClaims.MathML.XML where

import DA.Map (Map, toList, null)
import DA.Text (intercalate)
import Prelude hiding (null, elem)

type Attrs = Map Text Text
type XML = Text

class ToXML a where
  toXML: a -> XML

instance ToXML Text where
  toXML = identity

elem : ToXML a => Text -> a -> Attrs -> XML
elem name content attrs = "<" <> name <> as <> ">" <> toXML content <> "</" <> name <> ">"
  where as = if null attrs 
               then "" 
               else intercalate ";" . fmap (\(k,v) -> k <> "=" <> v) . toList $ attrs

elem_ : ToXML a => Text -> a -> XML
elem_ name content = elem name content mempty 
