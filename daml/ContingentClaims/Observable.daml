{-# LANGUAGE NoImplicitPrelude #-}

module ContingentClaims.Observable where

import Prelude (Bool, Decimal)

type Observable f t = (TimeF f t,
  PointF f t t,
  PointF f t Decimal,
  RingF f t Decimal,
  InequalityF f t Decimal,
  InequalityF f t t)

class TimeF f t where
  time : f t t

class PointF f t a where
  pure : a -> f t a

class RingF f t a where
  zero : f t a
  one : f t a
  (+) : f t a -> f t a -> f t a
  (-) : f t a -> f t a
  (*) : f t a -> f t a -> f t a
  (/) : f t a -> f t a -> f t a

class InequalityF f t a where
  (<=) : f t a -> f t a -> f t Bool
  (==) : f t a -> f t a -> f t Bool

{-
class LogicF f where
  (&&) : f Bool -> f Bool -> f Bool
-}
