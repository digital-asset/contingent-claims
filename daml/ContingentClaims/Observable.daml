--
-- Copyright (c) 2021, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

{-# LANGUAGE UndecidableInstances #-}

module ContingentClaims.Observable where

import Prelude hiding (pure)

type Key = Text

type Observable f t x = (TimeF f t,
  PointF f t t,
  PointF f t x,
  Number (f t x))

-- | Think of this as `f t t ≤ f t t | f t x ≤ f t x`
data Inequality f t x = LteT (f t t, f t t) | LteX (f t x, f t x)

evalInequality : Inequality f t x -> f t Bool
evalInequality (LteT (f, f')) = undefined
evalInequality (LteX (f, f')) = undefined

deriving instance (Eq (f t t), Eq (f t x)) => Eq (Inequality f t x)

deriving instance (Show (f t t), Show (f t x)) => Show (Inequality f t x)

class TimeF f t where
  time : f t t

class PointF f t a where
  pure : a -> f t a
  observe : Key -> f t a
