{-# LANGUAGE TypeOperators #-}

module ContingentClaims.Observation (Observation(..), observe, expiry, eval, HasFixings(..)) where

import ContingentClaims.Observable qualified as O
import Daml.Control.Kleisli
import Daml.Control.Category

type Key = Text
type (>=>) = Kleisli Update
type T = Observation

data Observation t a
  = DecimalConst Decimal
  | DecimalObs Key
  | DecimalLte (Observation t Decimal, Observation t Decimal)
  | DecimalEqu (Observation t Decimal, Observation t Decimal)
  | DecimalAdd (Observation t Decimal, Observation t Decimal)
  | DecimalNeg (Observation t Decimal)
  | DecimalMul (Observation t Decimal, Observation t Decimal)
  | DecimalDiv (Observation t Decimal, Observation t Decimal)
  | BoolConst Bool
  | DateIdentity
  | DateConst t
  | DateLte (Observation t t, Observation t t)
  | DateEqu (Observation t t, Observation t t)
  deriving (Eq, Show)

{- TODO: The algebra in it's current form is partial, so we can't implement (Co)recursive instance.
data ObservationF t a x
  = DecimalConstF Decimal
  | DecimalObsF Key
  | DecimalLteF (x, x)
  | DecimalEquF (x, x)
  | DecimalAddF (x, x)
  | DecimalNegF x
  | DecimalMulF (x, x)
  | DecimalDivF (x, x)
  | BoolConstF Bool
  | DateIdentityF
  | DateConstF t
  | DateLteF (x, x)
  | DateEquF (x, x)
  deriving (Eq, Show, Functor)
-}

observe : Text -> Observation t a
observe = DecimalObs

instance O.TimeF Observation t where
  time = DateIdentity

instance O.PointF Observation t t where
  pure = DateConst

instance O.InequalityF Observation t t where
  (<=) = curry DateLte
  (==) = curry DateEqu

instance O.PointF Observation t Decimal where
  pure = DecimalConst

instance O.InequalityF Observation t Decimal where
  (<=) = curry DecimalLte
  (==) = curry DecimalEqu

instance O.RingF Observation t Decimal where
  zero = DecimalConst 0.0
  one = DecimalConst 1.0
  (+) = curry DecimalAdd
  (-) = DecimalNeg
  (*) = curry DecimalMul
  (/) = curry DecimalDiv

--TODO: move expiry into the 'Interpret' typeclass
-- Derive the expiry date from a boolean expression
expiry : Observation t Bool -> Optional t
expiry (DateLte (DateIdentity, o)) = expiryDt o
expiry (DateEqu (DateIdentity, o)) = expiryDt o
expiry o = error "Error in  expression structure"

-- Helper function
expiryDt (DateLte (DateIdentity, o)) = expiryDt o
expiryDt (DateEqu (DateIdentity, o)) = expiryDt o
expiryDt DateIdentity = None
expiryDt (DateConst t) = Some t
expiryDt _ = error "Error in  expression structure"

class Interpret t a where
  eval : (Key -> t -> Update Decimal) -> Observation t a -> t >=> a

instance Ord t => Interpret t Bool where
  eval _ (BoolConst b) = pure b
  eval spot (DecimalLte (d, d')) = liftA2 (<=) (eval spot d) (eval spot d')
  eval spot (DecimalEqu (d, d')) = liftA2 (==) (eval spot d) (eval spot d')
  eval spot (DateLte (d, d')) = liftA2 (<=) (eval spot d) (eval spot d')
  eval spot (DateEqu (d, d')) = liftA2 (==) (eval spot d) (eval spot d')
  eval _ _ = error "eval: Interpret Bool"

instance Interpret t t where
  eval _ (DateConst t) = pure t
  eval _ DateIdentity = id
  eval _ _ = error "eval: Interpret Date"

instance Interpret t Decimal where
  eval _ (DecimalConst d) = pure d
  eval spot (DecimalObs key) = Kleisli $ spot key
  eval spot (DecimalAdd (x, x')) = liftA2 (+) (eval spot x) (eval spot x')
  eval spot (DecimalNeg x) = fmap (\x -> (- x)) (eval spot x)
  eval spot (DecimalMul (x, x')) = liftA2 (*) (eval spot x) (eval spot x')
  eval spot (DecimalDiv (x, x')) = liftA2 (/) (eval spot x) (eval spot x')
  eval _ _ = error "eval: Interpret Decimal"

class HasFixings t a where
  fixings : Observation t a -> [t]

instance HasFixings t Bool where
  fixings (DateEqu (o, o')) = fixings o ++ fixings o'
  fixings (DateLte (o, o')) = error "fixings: unimplemented DateLte"
  fixings _ = error "fixings: unimplemented"

instance HasFixings t t where
  fixings (DateConst d) = [d]
  fixings DateIdentity = []
  fixings _ = error "fixings: illegal argument"

instance HasFixings t Decimal where
  fixings (DecimalObs _) = []
  fixings (DecimalAdd _) = []
  fixings (DecimalNeg _) = []
  fixings (DecimalMul _) = []
  fixings (DecimalDiv _) = []
  fixings _ = error "fixings: illegal argument"
