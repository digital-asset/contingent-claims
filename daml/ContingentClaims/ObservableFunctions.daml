{-# LANGUAGE NoImplicitPrelude #-}

module ContingentClaims.ObservableFunctions where

-- TODO: rename this module to something more appropriate

import Daml.Control.Category (Category, id)
import Prelude (Applicative, Additive, Multiplicative, Divisible, Ord, aunit, munit, liftA2)
import Prelude qualified ((+),negate,(*),(/),(<=),(==),pure)
import ContingentClaims.Observable

-- Default instances for applicative functors

instance forall f t . Category f => TimeF f t where 
  time = id

instance forall f t a . Applicative (f t) => PointF f t a where
  pure = Prelude.pure

instance forall f t a . (Additive a, Multiplicative a, Divisible a, Applicative (f t)) => RingF f t a where
  zero = Prelude.pure aunit
  one = Prelude.pure munit
  (+) = liftA2 (Prelude.+)
  (-) = fmap (Prelude.negate)
  (*) = liftA2 (Prelude.*)
  (/) = liftA2 (Prelude./)

instance forall f t a . (Ord a, Applicative (f t)) => InequalityF f t a where
  (<=) = liftA2 (Prelude.<=)
  (==) = liftA2 (Prelude.==)

{-
instance forall f t . (Applicative (f t)) => LogicF (f t) where
  (&&) = liftA2 (Prelude.&&)
-}
