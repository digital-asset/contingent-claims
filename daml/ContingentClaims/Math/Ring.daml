{-# LANGUAGE TypeOperators #-}

module ContingentClaims.Math.Ring where

import Daml.Control.Recursion (Fix(..))
import ContingentClaims.Math.ADTaLaCarte

data RingF f 
  = ZeroF
  | OneF 
  | AddF { lhs : f, rhs : f }
  | NegF f
  | MulF { lhs : f, rhs : f }
  deriving Functor

(+) : forall f . RingF :≺: f => Fix f -> Fix f -> Fix f
x + y = inject (AddF x y)

(*) : forall f . RingF :≺: f => Fix f -> Fix f -> Fix f
x * y = inject (MulF x y)

negate : forall f . RingF :≺: f => Fix f -> Fix f
negate x = inject (NegF x)
