-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module ContingentClaims.Math.AcquisitionTime (
  AcquisitionTime(..),
  beforeOrAtToday,
  extend
) where

import ContingentClaims.Claim hiding (compare,(<=))
import Prelude hiding (Time, sequence, mapA, const)

-- | Acquisition time of a contract in the context of the valuation semantics.
-- It is either a deterministic time (`Time t`) or it is defined based on a set of `Inequality`. In the latter case, the acquisition time is defined as the first instant when all of the inequalities are met, with the inequalities generally being of stochastic nature.
-- [ML] it is not obvious if we actually need the (Time t) part as it could simply be expressed in terms of the deterministic inequality (TimeGte t)
data AcquisitionTime t x o
  = Time t
  | AtInequality { inequalities : [Inequality t x o] }
  deriving (Eq,Show)

-- | Given an inequality and an acquisition time τ1, it returns the acquisition time τ2 such that
-- - the inequality is verified at τ2
-- - τ2 >= τ1
-- The name `extend` comes from the fact that we are extending the set of inequality constraints that need to be verified
extend : (Ord t) => Inequality t x o -> AcquisitionTime t x o -> AcquisitionTime t x o
extend (TimeGte s) (Time t) = Time $ max s t
extend ineq@(Lte _) (Time t) = AtInequality [ineq, TimeGte t]
extend ineq (AtInequality ineqs) = AtInequality $ ineq :: ineqs

-- | Checks if an acquisition time falls before or at the today date.
-- `None` is returned if the acquisition time is unknown.
beforeOrAtToday : (Ord t) => t -> AcquisitionTime t x a -> Optional Bool
beforeOrAtToday today (Time s) = Some $ s <= today
beforeOrAtToday today (AtInequality [TimeGte s]) = Some $ s <= today
beforeOrAtToday today (AtInequality _) = None

