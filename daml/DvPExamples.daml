module DvPExamples where

{-# LANGUAGE ApplicativeDo #-} --for scripts?

import Prelude hiding (and, or, time, (.))
-- import Daml.Script
import Obligation
import DA.Date (date,Month(..))
import Category
-- import Id

-- Specialized effect-less obligation for DvP
--type Kleisli m a b = a -> m b
type ISIN = Text
type Asset = Either Ccy Security
type Obligations = Obligation (->) Date Asset

-- Asset types
data Ccy = GBP | USD deriving  (Eq, Show)

data Security = Security with
    isin: ISIN
    claims: Obligations

time 
  : forall f t . Category f 
  => f t t
time = id

zcb 
  : forall f t a . (Eq t, Category f, Applicative (f t)) 
  => t -> Decimal -> a -> Obligation f t a
zcb maturity payoff asset = when (at maturity) $ scale (pure payoff) (one asset)

at 
  : forall f t . (Eq t, Category f, Applicative (f t)) 
  => t -> f t Bool
at t = liftA2 (==) time (pure t)

european 
  : forall f t a . (Eq t, Category f, Applicative (f t)) 
  => t -> Obligation f t a -> Obligation f t a
european t u = when (at t) (u `or` Zero)

american 
  : forall f t a . (Ord t, Category f, Applicative (f t)) 
  => t -> t -> Obligation f t a -> Obligation f t a
american t t' u = anytime (between t t') u

between 
  : forall f t a . (Ord t, Category f, Applicative (f t)) 
  => t -> t -> f t Bool
between t t' = liftA2 (&&) (liftA2 (>=) time (pure t))  (liftA2 (<=) time (pure t'))

-- Note you have to explicitly specify the type
myZcb : Obligations = when (at $ date 2020 Dec 1) (scale (pure 100.0) . one . Left $ GBP)

{-
template Quote 
  with
    isin: ISIN
    quoteDate: Date
    close: Decimal
    source: Party
  where
    signatory source
    key (isin, quoteDate, source) : (ISIN, Date, Party)
    maintainer key._3


template FinancialContract 
  with
    bearer: Party
    counterparty: Party
  where
    let obligations : ISIN -> Date -> Obligation f Date ISIN
        obligations isin t = european t isin

    signatory bearer, counterparty

    controller (signatory this) can 
      Price : Decimal with -- The value of the security
        t : Date           -- The date of valuation
        isin: Text         -- The security ISIN code
        ccy: Ccy           -- The currency of valuation (or take off the security?)
          do return undefined
        

-- Some helper functions for defining obligations
pay amt = deliver . scale (pure amt) . one . Left

receive amt = scale (pure amt) . one . Right

dividend : Decimal -> Ccy -> Date -> Obligations
dividend px ccy t = when undefined (scale (pure px) . one $ Left ccy)


-- Example of how this would be used

x = script do
  buyer <- allocateParty "Alice"
  seller <- allocateParty "Bob"
  let vod = Security with
              isin = "GB01234567890" 
              claims 
                =     dividend 0.65 GBP (date 2020 Dec 1)
                `and` dividend 0.65 GBP (date 2021 Jan 30)
  submit buyer do 
    createCmd DeliveryVersusPayment with
      bearer = buyer
      counterparty = seller
      obligations = pay 10000.0 GBP `and` receive 200.0 vod
  submit buyer do 
    createCmd DeliveryVersusPayment with
      bearer = buyer
      counterparty = seller
      obligations 
        =     pay 10000.0 GBP 
        `and` when (liftA2 (==) t (pure $ date 2020 Dec 1)) (receive 200.0 vod)
     
-}
