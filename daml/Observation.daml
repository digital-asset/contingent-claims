module Observation (Observation, expiry) where

import Observable qualified as O

type ISIN = Text

type T = Observation

data Observation t a
  = DecimalConst Decimal
  | DecimalSpot ISIN
  | DecimalLte (Observation t Decimal, Observation t Decimal)
  | DecimalEqu (Observation t Decimal, Observation t Decimal)
  | BoolConst Bool
  | DateIdentity
  | DateConst t
  | DateLte (Observation t t, Observation t t)
  | DateEqu (Observation t t, Observation t t)
  deriving (Eq, Show)

instance O.TimeF Observation t where
  time = DateIdentity

instance O.PointF Observation t t where
  pure = DateConst

instance O.InequalityF Observation t t where
  (<=) = curry DateLte
  (==) = curry DateEqu

instance O.PointF Observation t Decimal where
  pure = DecimalConst

instance O.InequalityF Observation t Decimal where
  (<=) = curry DecimalLte
  (==) = curry DecimalEqu

-- Derive the expiry date from a boolean expression
expiry : Observation t Bool -> Optional t
expiry (DateLte (DateIdentity, o)) = expiryDt o
expiry (DateEqu (DateIdentity, o)) = expiryDt o
expiry o = error "Error in  expression structure"

-- Helper function. TODO: exclude from exports, or move into @Observation@ module.
expiryDt (DateLte (DateIdentity, o)) = expiryDt o
expiryDt (DateEqu (DateIdentity, o)) = expiryDt o
expiryDt DateIdentity = None
expiryDt (DateConst t) = Some t
expiryDt _ = error "Error in  expression structure"


