module Recursion where

import Category ((>>>),(<<<))
import Arrow ((&&&),(|||))
import Comonad

-- newtype Fix f = Fix { unfix : f (Fix f) }

data Free f a 
  = Pure a
  | Impure (f (Free f a))

data Cofree f a = Cofree {
  attribute : a,
  unwrap : f (Cofree f a)
} deriving Functor

instance Functor f => Comonad (Cofree f) where
  extract (Cofree a _) = a
  duplicate f = Cofree f $ fmap duplicate f.unwrap

class Functor f => Recursive b f | b -> f b where
  project: b -> f b

  cata : (f a -> a) -> b -> a
  cata f b = (project >>> fmap (cata f) >>> f) b

  para : (f (b, a) -> a) -> b -> a
  para f b = (project >>> fmap (identity &&& para f) >>> f) b

  histo : (f (Cofree f a) -> a) -> b -> a
  histo = gcata seqCofree

  gcata : Comonad w => (forall z . f (w z) -> w (f z)) -> (f (w a) -> a) -> b -> a
  gcata sequence f b = (_gcata sequence f >>> extract >>> f) b

seqCofree : Functor f => f (Cofree f a) -> Cofree f (f a)
seqCofree w = Cofree (fmap extract w) (fmap (seqCofree . unwrap) w)

_gcata 
  : (Recursive b f , Comonad w)
  => (forall z . f (w z) -> w (f z)) 
  -> (f (w a) -> a) 
  -> b 
  -> w (f (w a))
_gcata sequence f b = (project >>> fmap (_gcata sequence f >>> fmap f >>> duplicate) >>> sequence) b

class Functor f => Corecursive b f | f -> b where
  embed: f b -> b

  ana : (a -> f a) -> a -> b
  ana f b = (embed <<< fmap (ana f) <<< f) b

  apo : (a -> f (Either b a)) -> a -> b
  apo f b = (embed <<< fmap (identity ||| apo f) <<< f) b

-- Standard Base Functors

data ListF a x = Nil | Cons with value: a, pattern: x deriving Functor

instance Recursive [a] (ListF a) where
  project [] = Nil
  project (a :: as) = Cons a as

instance Corecursive [a] (ListF a) where
  embed Nil = []
  embed (Cons a as) = a :: as

oursum = cata \case
           Nil -> 0
           Cons x acc -> acc + x

s = oursum [1..20]
