module Obligation where

import Prelude hiding (or, and)

-- | In Petyon-Jones' paper, this is called 'Contract'.
-- We renamed it to avoid ambiguity
data Obligation f a
    = Zero
    | One a
    | Deliver (Obligation f a)
    | And with lhs: Obligation f a, rhs: Obligation f a
    | Or with lhs: Obligation f a, rhs: Obligation f a
    | Cond with predicate: f Bool, success: Obligation f a, failure: Obligation f a
    | Scale with k: f Decimal, obligation: Obligation f a
    | When with predicate: f Bool, obligation: Obligation f a
    | Anytime with predicate: f Bool, obligation: Obligation f a
    | Until with predicate: f Bool, obligation: Obligation f a

-- zero : Obligation f a
-- zero = Zero

one ccy = One ccy

deliver x = Deliver x

and c1 c2 = And c1 c2

or c1 c2 = Or c1 c2

cond p c1 c2 = Cond p c1 c2

scale k c1 = Scale k c1

when o c1 = When o c1

anytime o c1 = Anytime o c1

until o c1 = Until o c1

expiry o = undefined
