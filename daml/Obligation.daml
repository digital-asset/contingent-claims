module Obligation where

import Prelude hiding (or, and)

-- | In Petyon-Jones' paper, this is called 'Contract'.
-- We renamed it to avoid ambiguity
-- @f@ is the effect
-- @t@ is time
-- @a@ is the asset
-- Finally, for this to be useful, @t `f` a@ should form a category.
-- TODO: f should depend on t
data Obligation f t a
    = Zero
    | One a
    | Deliver (Obligation f t a)
    | And with lhs: Obligation f t a, rhs: Obligation f t a
    | Or with lhs: Obligation f t a, rhs: Obligation f t a
    | Cond with predicate: f t Bool, success: Obligation f t a, failure: Obligation f t a
    | Scale with k: f t Decimal, obligation: Obligation f t a
    | When with predicate: f t Bool, obligation: Obligation f t a
    | Anytime with predicate: f t Bool, obligation: Obligation f t a
    | Until with predicate: f t Bool, obligation: Obligation f t a

-- zero : Obligation f a
-- zero = Zero

one ccy = One ccy

deliver x = Deliver x

and c1 c2 = And c1 c2

or c1 c2 = Or c1 c2

cond p c1 c2 = Cond p c1 c2

scale k c1 = Scale k c1

when o c1 = When o c1

anytime o c1 = Anytime o c1

until o c1 = Until o c1

expiry o = undefined
