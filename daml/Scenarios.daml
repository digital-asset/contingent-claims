daml 1.2
module Scenarios where

import Finance
import DA.Date

spMini = 
  scenario do
     -- client <- getParty "Alice"
     broker <- getParty "Bob"
     submit broker do
       msa <- create MasterServiceAgreement with
         buyer = broker
         seller = broker
         marketDataProvider = broker

       -- Create a new financial option contract with payoffs matching ES
       let t = date 2020 May 01
       spMini <- exercise msa Execute with
         obligations = european
           t
           (scale (konst 50.0) (one USD)) -- * spot (SecurityId ("ES")))

       -- forward time to maturity
       -- TODO

       -- On maturity, chose the non-zero option (TODO: make a helper function for this?)
       spMiniContract <- fetch spMini
       let election = case spMiniContract.obligations of 
                         Or payoff Zero -> payoff
                         _ -> error $ "No choice to make at date " <> show spMiniContract.asAt
       -- Lifecycle the contract
       spMini <- exercise spMini Lifecycle with t, election
       spMiniContract <- fetch spMini
       assert(spMiniContract.obligations == scale (konst 50.0) (one USD))
       return ()


