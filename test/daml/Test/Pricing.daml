module Test.Pricing where

import ContingentClaims.Claim
import ContingentClaims.FinancialClaim (european)
import ContingentClaims.Observable qualified as O
import ContingentClaims.Observation (Observation)
import ContingentClaims.MathML qualified as MathML
import ContingentClaims.Math.Stochastic (fapf, simplify, riskless, gbm)

import Daml.Script
import DA.Assert

data Instrument = USD | EUR | AMZN | APPL deriving (Show, Eq)

call : Instrument -> Decimal -> Instrument -> Claim Observation t Decimal Instrument
call s k a = Scale (O.observe s - O.pure k) $ One a

margrabe s1 s2 a = Scale (O.observe s1 - O.observe s2) $ One a

disc USD = riskless "r_USD"
disc EUR = riskless "r_EUR"
disc other = error $ "disc: " <> show other

exch AMZN _ = gbm "μ_AMZN" "σ_AMZN"
exch APPL _ = gbm "μ_APPL" "σ_APPL"
exch a a' = error $ "exch: " <> show a <> "/" <> show a'

test = script do
  let today = "t"
      maturity = "T"
      s = fapf USD disc exch today $ european maturity (call AMZN 3300.0 USD)
  (show . MathML.presentation . simplify $ s) === ""

  let s = fapf USD disc exch today $ european maturity (margrabe AMZN APPL USD)
  (show . MathML.presentation . simplify $ s) === ""
