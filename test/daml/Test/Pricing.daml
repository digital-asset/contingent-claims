module Test.Pricing where

import ContingentClaims.Claim
import ContingentClaims.FinancialClaim (european)
import ContingentClaims.Observable qualified as O
import ContingentClaims.Observation (Observation)
import ContingentClaims.MathML qualified as MathML
import ContingentClaims.Math.Stochastic (fapf, Expr, Process(..), simplify)

import Daml.Script
import DA.Assert

data Instrument = USD | EUR | AMZN deriving (Show, Eq)

call : Instrument -> Decimal -> Instrument -> Claim Observation Decimal Decimal Instrument
call s k a = Scale (O.observe s - O.pure k) $ One a

days = identity

disc USD = Riskless
disc EUR = Riskless
disc other = error $ "disc: " <> show other

exch AMZN _ = GBM
exch a a' = if a == a' then ConstOne else error $ "exch: " <> show a <> "/" <> show a'

test = script do
  let t = 30.0/256.0
      s_0 : Expr = fapf USD disc exch $ european t (call AMZN 3300.0 USD)
  (show . MathML.presentation . simplify $ s_0)  === ""
