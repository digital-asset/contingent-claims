{-# LANGUAGE UndecidableInstances #-}
module Test.Valuation where

import ContingentClaims.Claim
import ContingentClaims.FinancialClaim
import ContingentClaims.Observable qualified as O
import ContingentClaims.Observation (observe)
import ContingentClaims.Valuation (ExprF, fapf)
import ContingentClaims.Math.Ring
import ContingentClaims.Math.Processes (randomWalk)
import ContingentClaims.Math.Ring qualified as Ring
import ContingentClaims.MathML.XML
import ContingentClaims.MathML.Presentation qualified as MathML
import Daml.Control.Recursion (Fix(..))
import DA.Assert ((===))
import DA.Date (date,Month(..))
import Daml.Script
import Prelude hiding ((+))

deriving instance {-# OVERLAPPING #-} (Show (f (Fix f))) => Show (Fix f)
deriving instance {-# OVERLAPPING #-} (Eq (f (Fix f))) => Eq (Fix f)
deriving instance {-# OVERLAPPING #-} (ToXML (f (Fix f))) => ToXML (Fix f)

deriving instance {-# OVERLAPPING #-} Show (Fix ExprF)
deriving instance {-# OVERLAPPING #-} Eq (Fix ExprF)
deriving instance {-# OVERLAPPING #-} ToXML (Fix ExprF)

valueEuropeanCall = script do
  let k : Decimal = 123.0
      r : Decimal = 0.03
      t : Date = date 2021 Mar 15
      call = european t (Scale (observe "VOD.L" O.+ (O.-) (O.pure k)) (One "GBP"))
      env : Text -> Fix ExprF
      env "VOD.L" = 
        let r = randomWalk "θ" "μ" "S"
        in r.dt + r.dX
      formula = fapf identity env call 
  MathML.math formula === "<math/>"
  formula === Ring.one
