module Test.Valuation where

import ContingentClaims.Claim
import ContingentClaims.FinancialClaim
import ContingentClaims.Observable qualified as O
import ContingentClaims.Observation (observe)
-- import ContingentClaims.Valuation (fapf)
-- import ContingentClaims.Math.Random qualified as Random
-- import DA.Assert ((===))
import DA.Date (date,Month(..))
import Daml.Script

valueEuropeanCall = script do
  let k : Decimal = 123.0
      r : Decimal = 0.03
      call = european (date 2021 Mar 15) (Scale (observe "VOD.L" O.+ (O.-) (O.pure k)) (One "GBP"))
{-
      disc = point exp (-r)
      spot t "VOD.L" : Random.Process Date Random.Gaussian = reader \t -> _
      s = spot t "VOD.L"
  fapf disc spot call === disc t * (s - point k) * (indicator (point k) s)
-}
  pure ()
