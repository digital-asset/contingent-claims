--
-- Copyright (c) 2021, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

-- TODO: this should all be moved into the "Contingent claims" library. There is nothing specific to the marketplace here.
{-# LANGUAGE ApplicativeDo #-}
{-# LANGUAGE UndecidableInstances #-} --needed to derive cofree Show,Eq

module Test.Lifecycle where

import ContingentClaims.Claim hiding (C, F)
import ContingentClaims.Observable qualified as O
import ContingentClaims.Observation (Observation)
import ContingentClaims.Observation qualified as O
import ContingentClaims.Lifecycle qualified as Lifecycle
import ContingentClaims.FinancialClaim
import DA.Assert ((===))
import DA.Date (date, Month(..))
import Daml.Control.Recursion
import Daml.Script
import Prelude hiding (enumerate, length, or, and)

type C = Claim Observation Date Text
type F = ClaimF Observation Date Text

deriving instance (Show a, Show (f (Cofree f a))) => Show (Cofree f a)
deriving instance (Eq a, Eq (f (Cofree f a))) => Eq (Cofree f a)
deriving instance Show (F (Cofree F Int))
deriving instance Eq (F (Cofree F Int))

[a,b,c] = ["a","b","c"]

chooseFst _ _ = True

lifecycling : Script ()
lifecycling = script do
  let spot _ _ = pure (0.0 : Decimal)
      cashflow = When (at $ date 2020 Jan 01) (One a)
  Lifecycle.Result{remaining, pending} <-
    Lifecycle.lifecycle spot chooseFst cashflow (date 2020 Jan 01)
  remaining === Zero
  pending === pure (1.0, a)

  let nothing : C = Scale (O.pure 1.0) Zero
  Lifecycle.Result{remaining, pending} <-
    Lifecycle.lifecycle spot chooseFst nothing (date 2020 Jan 02)
  remaining === Zero
  pending === mempty

  let something : C = Scale (O.pure 3.0) (One a)
  Lifecycle.Result{remaining, pending} <-
    Lifecycle.lifecycle spot chooseFst something (date 2020 Jan 02)
  remaining === Zero
  pending === pure (3.0, a)

  let fwd = (When (at $ date 2020 Jan 03) $ Give (One a))
  Lifecycle.Result{remaining, pending} <-
    Lifecycle.lifecycle spot chooseFst fwd (date 2020 Jan 03)
  remaining === Zero
  pending === pure (- 1.0, a)

  let bond : C = fixed 100_000.0 3000.0 a $ unrollDates 2021 2022 [Jan, Jun] 15
      spot _ _ = pure (0.0 : Decimal)
  Lifecycle.Result{remaining, pending} <-
    Lifecycle.lifecycle spot chooseFst bond (date 2021 Jan 15)
  remaining === bond.rhs
  pending === pure (100_000.0 * 0.03, a)

  let option : C = european (date 2021 Mar 9) $ Scale (O.observe "USD"  O.- O.pure 42.0) (One a)
      spot _ _ = pure (43.4 : Decimal)
  Lifecycle.Result{remaining, pending} <-
    Lifecycle.lifecycle spot chooseFst option (date 2021 Mar 9)
  remaining === Zero
  pending === pure (43.4 - 42.0, a)

  let weirdNote : C = When (at $ date 2021 Mar 10) $ One a `Or` One b
  Lifecycle.Result{remaining, pending} <-
     Lifecycle.lifecycle spot chooseFst weirdNote (date 2021 Mar 10)
  remaining === Zero
  pending === pure (1.0, a)

  -- For github issue #10
  let outerScale : C = Scale (O.pure 2.0) $ When (at $ date 2021 Mar 11) (One a)
  Lifecycle.Result{remaining, pending} <-
    Lifecycle.lifecycle spot chooseFst outerScale (date 1970 Jan 1)
  remaining === outerScale
  pending === mempty
  Lifecycle.Result{remaining, pending} <-
    Lifecycle.lifecycle spot chooseFst outerScale (date 2021 Mar 11)
  remaining === Zero
  pending === pure (2.0, a)
