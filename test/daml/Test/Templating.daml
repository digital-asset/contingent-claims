--
-- Copyright (c) 2021, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

{-# LANGUAGE UndecidableInstances #-} --needed to derive cofree Show,Eq

-- | This gives an example of how to 'template' claims.
module Test.Templating where

import Daml.Script
import ContingentClaims.FinancialClaim
import ContingentClaims.Observable qualified as O
import ContingentClaims.Observation (Observation(..))
import ContingentClaims.Claim
import DA.Date
import DA.Assert
import DA.Optional (fromSome)
import DA.Map qualified as Map

deriving instance (Show t, Show x, Show a) => Show (Claim Observation t x a)
deriving instance (Eq t, Eq x, Eq a) => Eq (Claim Observation t x a)

instance Additive Text where
  aunit = "0"
  x + y = x <> "+" <> y
  negate x = "-" <> x

instance Multiplicative Text where
  munit = "1"
  x * y = x <> "*" <> y
  x ^ i = x <> "^" <> show i

usd = "USD"

demoTemplate = script do 
  let today = date 2021 Jun 8
      expr : Observation Int Decimal = O.pure 1.0 + O.observe "key"
      expr' : Observation Date Decimal = O.pure 1.0 + O.observe "key"
  O.cmapTime (`subDate` today) expr === expr'

  {-
  let today = date 2021 Jun 8
      call spot strike = O.observe spot - O.pure strike
      aTemplate = european (date 2021 Jul 15 `subDate` today) (Scale (call "s" "k") (One usd))

  aTemplate === When (O.TimeGte 37) (Scale (Observe "s" - Const "k") (One usd) `Or` Zero)

  let constants : Map.Map O.Param Decimal = Map.fromList [("k", 99.8)]
      observables : Map.Map O.Param O.Key = Map.fromList [("s", "VOD.L")]
      get dict k = fromSome (Map.lookup k dict)
      f = mapParams (get observables) (get constants) . cmapTime (`subDate` today) (today `addDays`)

  f aTemplate === When (O.TimeGte $ date 2021 Jul 15) (Scale (Observe "VOD.L" - Const 99.8) (One usd) `Or` Zero)
-}
