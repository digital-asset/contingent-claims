module Test.FinancialContract where

import ContingentClaims.Claim.Serializable (Claim)
import ContingentClaims.Claim (deserialize, serialize, executorOf)
import DA.Next.Set qualified as Set
import DA.Date
import Test.Currency
import ContingentClaims.Lifecycle (lifecycle)

type T = FinancialContract
type Days = Int
type ISIN = Text
type Asset = Either Currency ISIN
type Claims = Claim Date Asset

template Quote
  with
    isin: ISIN
    quoteDate: Date
    close: Decimal
    source: Party
  where
    signatory source
    key (isin, quoteDate, source) : (ISIN, Date, Party)
    maintainer key._3

template FinancialContract
  with
    bearer: Party
    counterparty: Party
    obligations: Claim Date Asset
  where
    signatory Set.fromList [bearer, counterparty]

    let obligations = deserialize this.obligations
        executor = executorOf bearer counterparty obligations

    -- Create dummy contracts to settle 'current' obligations
    choice Clear : [ContractId ProposeSettlement]
      controller executor
        do t <- toDateUTC <$> getTime
           let getSpotRate isin t = do
                 (_, Quote{close}) <- fetchByKey (isin, t, bearer) -- FIXME: maintainer should be the market data provider
                 pure close
               elect = const -- always branch left. In a real example, you would pass this in the choice params
           lifecycleResult <- lifecycle getSpotRate elect obligations t
           settlements <- forA lifecycleResult.pending \(quantity, asset) ->
             create ProposeSettlement
               with
                 payer = counterparty --FIXME: this breaks with a Give Node
                 receiver = bearer
                 asset
                 quantity
                 tradeDate = t
           create this with obligations = serialize lifecycleResult.remaining
           return settlements

-- Dummy contract to propose settlement
template ProposeSettlement
  with
    payer: Party
    receiver: Party
    quantity: Decimal
    asset: Asset
    tradeDate : Date
  where
    signatory Set.fromList [payer, receiver]

    controller receiver can
      Confirm : () do
        debug $ "Settled: " <> show this
        return ()
