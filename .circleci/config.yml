#
# Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#

version: 2.1

executors:
  daml-executor:
    docker:
      - image: cimg/openjdk:11.0

commands:
  install_sdk:
    description: "Install Daml SDK"
    steps:
      - run:
          name: Install Daml SDK
          command: |
            curl -sSL https://get.daml.com/ | sh /dev/stdin ${SDK_VERSION}
            # idea from https://circleci.com/docs/2.0/env-vars/
            >> $BASH_ENV echo 'export PATH="$HOME/.daml/bin:$PATH"'
  install_yq:
    description: "Install yq from binary"
    steps:
      - run:
          name: Install yq
          command: |
            mkdir -p $HOME/yq
            curl -L https://github.com/mikefarah/yq/releases/download/3.4.1/yq_linux_amd64 -o $HOME/yq/yq &&\
              chmod +x $HOME/yq/yq &&\
              echo 'export PATH=$HOME/yq/yq:$PATH' >> $BASH_ENV
  install_gh:
    description: "Install GitHub Cli"
    steps:
      - run:
          name: Install gh
          command: |
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
  install_pandoc:
    description: "Install Pandoc"
    steps:
      - run:
          name: Install pandoc
          command: |
            sudo apt update
            sudo apt install pandoc
  set_sdk_version:
    description: "Set Daml SDK version environment version"
    steps:
      - run:
          name: Set Daml SDK version
          command: echo 'export SDK_VERSION=$(yq e '.sdk-version' daml.yaml)' >> $BASH_ENV
  run_release:
    description: "Run Release"
    steps:
      - run:
          name: "Get target release version"
          command: echo 'export VERSION=$(yq e '.version' daml.yaml)' >> $BASH_ENV
      - run:
          name: "Validate target release version"
          command: |
            if [[ `git tag | grep -Fx "v$VERSION" - | wc -l` -eq 0 ]] ; then
              echo "New tag detected ${VERSION}. Releasing..."
            else
              echo "Tag ${VERSION} already exists; Skipping Release."
              circleci-agent step halt
            fi
      - run:
          name: "Tag and push to GitHub"
          command: gh release create v${VERSION} .daml/dist/contingent-claims-${VERSION}.dar --generate-notes
      - store_artifacts:
          path: .daml/dist/contingent-claims-${VERSION}.dar
          destination: contingent-claims-dar-${VERSION}
      - run:
          name: "Generate doc and push to GitHub pages"
          command: make publish-api-doc

jobs:
  build:
    executor: daml-executor
    steps:
      - checkout
      - install_yq
      - set_sdk_version
      - install_sdk
      - run:
          name: Build Daml
          command: |
            make build
      - run:
          name: Daml tests
          command: |
            make test
      - save_cache:
          paths:
            - .daml
          key: contingent-claims-{{ .Revision }}

  release:
    executor: daml-executor
    steps:
      - checkout
      - install_yq
      - install_gh
      - install_pandoc
      - restore_cache:
          keys:
            - contingent-claims-{{ .Revision }}
      - run_release

  blackduck:
    executor: daml-executor
    steps:
      - checkout
      - run:
          name: Blackduck detect
          command: |
            bash <(curl -s https://raw.githubusercontent.com/DACH-NY/security-blackduck/master/synopsys-detect) \
            ci-build digitalasset_contingent-claims master \
            --logging.level.com.synopsys.integration=DEBUG \
            --detect.excluded.detector.types=pip \
            --detect.notices.report=false \
            --detect.timeout=3600

workflows:
  version: 2
  build:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - master
  build_and_release:
    jobs:
      - build:
#         filters:
#           branches:
#             only:
#               - master
      - release:
          context: github-fin-eng-context
          requires:
            - build
#         filters:
#           branches:
#             only:
#               - master
  scheduled_test:
    triggers:
      - schedule:
          # need to scatter jobs to reduce Blackduck load
          # see also https://digitalasset.atlassian.net/browse/ERA-913
          cron: "0 1 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build
      - blackduck:
          context:
            - blackduck
